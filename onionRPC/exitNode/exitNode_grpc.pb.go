// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package exitNode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExitNodeServiceClient is the client API for ExitNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExitNodeServiceClient interface {
	ExchangePublicKey(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*PublicKey, error)
	ForwardRequest(ctx context.Context, in *ReqEncrypted, opts ...grpc.CallOption) (*ResEncrypted, error)
}

type exitNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExitNodeServiceClient(cc grpc.ClientConnInterface) ExitNodeServiceClient {
	return &exitNodeServiceClient{cc}
}

func (c *exitNodeServiceClient) ExchangePublicKey(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*PublicKey, error) {
	out := new(PublicKey)
	err := c.cc.Invoke(ctx, "/exitNode.ExitNodeService/ExchangePublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exitNodeServiceClient) ForwardRequest(ctx context.Context, in *ReqEncrypted, opts ...grpc.CallOption) (*ResEncrypted, error) {
	out := new(ResEncrypted)
	err := c.cc.Invoke(ctx, "/exitNode.ExitNodeService/ForwardRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExitNodeServiceServer is the server API for ExitNodeService service.
// All implementations must embed UnimplementedExitNodeServiceServer
// for forward compatibility
type ExitNodeServiceServer interface {
	ExchangePublicKey(context.Context, *PublicKey) (*PublicKey, error)
	ForwardRequest(context.Context, *ReqEncrypted) (*ResEncrypted, error)
	mustEmbedUnimplementedExitNodeServiceServer()
}

// UnimplementedExitNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExitNodeServiceServer struct {
}

func (UnimplementedExitNodeServiceServer) ExchangePublicKey(context.Context, *PublicKey) (*PublicKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangePublicKey not implemented")
}
func (UnimplementedExitNodeServiceServer) ForwardRequest(context.Context, *ReqEncrypted) (*ResEncrypted, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardRequest not implemented")
}
func (UnimplementedExitNodeServiceServer) mustEmbedUnimplementedExitNodeServiceServer() {}

// UnsafeExitNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExitNodeServiceServer will
// result in compilation errors.
type UnsafeExitNodeServiceServer interface {
	mustEmbedUnimplementedExitNodeServiceServer()
}

func RegisterExitNodeServiceServer(s grpc.ServiceRegistrar, srv ExitNodeServiceServer) {
	s.RegisterService(&ExitNodeService_ServiceDesc, srv)
}

func _ExitNodeService_ExchangePublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExitNodeServiceServer).ExchangePublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exitNode.ExitNodeService/ExchangePublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExitNodeServiceServer).ExchangePublicKey(ctx, req.(*PublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExitNodeService_ForwardRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEncrypted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExitNodeServiceServer).ForwardRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exitNode.ExitNodeService/ForwardRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExitNodeServiceServer).ForwardRequest(ctx, req.(*ReqEncrypted))
	}
	return interceptor(ctx, in, info, handler)
}

// ExitNodeService_ServiceDesc is the grpc.ServiceDesc for ExitNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExitNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exitNode.ExitNodeService",
	HandlerType: (*ExitNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangePublicKey",
			Handler:    _ExitNodeService_ExchangePublicKey_Handler,
		},
		{
			MethodName: "ForwardRequest",
			Handler:    _ExitNodeService_ForwardRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exitNode/exitNode.proto",
}
