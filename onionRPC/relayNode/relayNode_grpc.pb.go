// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package relayNode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelayNodeServiceClient is the client API for RelayNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayNodeServiceClient interface {
	ExchangePublicKey(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*PublicKey, error)
	ForwardRequest(ctx context.Context, in *Encrypted, opts ...grpc.CallOption) (*Encrypted, error)
}

type relayNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayNodeServiceClient(cc grpc.ClientConnInterface) RelayNodeServiceClient {
	return &relayNodeServiceClient{cc}
}

func (c *relayNodeServiceClient) ExchangePublicKey(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*PublicKey, error) {
	out := new(PublicKey)
	err := c.cc.Invoke(ctx, "/relayNode.RelayNodeService/ExchangePublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayNodeServiceClient) ForwardRequest(ctx context.Context, in *Encrypted, opts ...grpc.CallOption) (*Encrypted, error) {
	out := new(Encrypted)
	err := c.cc.Invoke(ctx, "/relayNode.RelayNodeService/ForwardRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayNodeServiceServer is the server API for RelayNodeService service.
// All implementations must embed UnimplementedRelayNodeServiceServer
// for forward compatibility
type RelayNodeServiceServer interface {
	ExchangePublicKey(context.Context, *PublicKey) (*PublicKey, error)
	ForwardRequest(context.Context, *Encrypted) (*Encrypted, error)
	mustEmbedUnimplementedRelayNodeServiceServer()
}

// UnimplementedRelayNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelayNodeServiceServer struct {
}

func (UnimplementedRelayNodeServiceServer) ExchangePublicKey(context.Context, *PublicKey) (*PublicKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangePublicKey not implemented")
}
func (UnimplementedRelayNodeServiceServer) ForwardRequest(context.Context, *Encrypted) (*Encrypted, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardRequest not implemented")
}
func (UnimplementedRelayNodeServiceServer) mustEmbedUnimplementedRelayNodeServiceServer() {}

// UnsafeRelayNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayNodeServiceServer will
// result in compilation errors.
type UnsafeRelayNodeServiceServer interface {
	mustEmbedUnimplementedRelayNodeServiceServer()
}

func RegisterRelayNodeServiceServer(s grpc.ServiceRegistrar, srv RelayNodeServiceServer) {
	s.RegisterService(&RelayNodeService_ServiceDesc, srv)
}

func _RelayNodeService_ExchangePublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayNodeServiceServer).ExchangePublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayNode.RelayNodeService/ExchangePublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayNodeServiceServer).ExchangePublicKey(ctx, req.(*PublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayNodeService_ForwardRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Encrypted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayNodeServiceServer).ForwardRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayNode.RelayNodeService/ForwardRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayNodeServiceServer).ForwardRequest(ctx, req.(*Encrypted))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayNodeService_ServiceDesc is the grpc.ServiceDesc for RelayNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relayNode.RelayNodeService",
	HandlerType: (*RelayNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangePublicKey",
			Handler:    _RelayNodeService_ExchangePublicKey_Handler,
		},
		{
			MethodName: "ForwardRequest",
			Handler:    _RelayNodeService_ForwardRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relayNode/relayNode.proto",
}
